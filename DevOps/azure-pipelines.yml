name: Infra_$(SourceBranchName)_$(Build.Reason)_$(Date:yyyyMMdd).$(Rev:r)

variables:
  - group: "DemoVariableGroup"

trigger:
  - main

pool:
  vmImage: "ubuntu-22.04"

stages:
  - stage: "Build"
    displayName: "Build"
    jobs:
      - job: "Terraform"
        displayName: "Terraform"
        steps:
          - task: CopyFiles@2
            displayName: "Copy Terraform files"
            inputs:
              SourceFolder: "$(System.DefaultWorkingDirectory)/$(TerraformFolder)"
              Contents: "**"
              TargetFolder: $(Build.ArtifactStagingDirectory)

          - publish: "$(Build.ArtifactStagingDirectory)"
            artifact: infra

      - job: "Website"
        displayName: "Website"
        steps:
          - task: qetza.replacetokens.replacetokens-task.replacetokens@5
            displayName: "Replace tokens"
            inputs:
              rootDirectory: $(System.DefaultWorkingDirectory)/$(WebsiteFolder)
              targetFiles: "staticwebapp.config.json"
              tokenPattern: custom
              tokenPrefix: "@#{"
              tokenSuffix: "}#@"
              actionOnMissing: fail
              actionOnNoFiles: fail
              enableTelemetry: false

          - task: NodeTool@0
            displayName: "Install Node JS"
            inputs:
              versionSpec: "16.x"
              checkLatest: true

          - task: Cache@2
            displayName: Cache API NPM packages
            inputs:
              key: "$(System.DefaultWorkingDirectory)/$(WebsiteFolder)/api/package-lock.json"
              path: $(Pipeline.Workspace)/.npm

          - script: |
              npm ci --cache $(Pipeline.Workspace)/.npm
            displayName: "Install API NPM packages"
            workingDirectory: $(System.DefaultWorkingDirectory)/$(WebsiteFolder)/api

          - task: CopyFiles@2
            displayName: "Copy website files"
            inputs:
              SourceFolder: "$(System.DefaultWorkingDirectory)/$(WebsiteFolder)"
              Contents: "**"
              TargetFolder: $(Build.ArtifactStagingDirectory)

          - publish: "$(Build.ArtifactStagingDirectory)"
            artifact: app

  - stage: "Deployment"
    displayName: "Deployment"
    jobs:
    - job: deployment
      steps:
        - download: current
          artifact: infra

        - download: current
          artifact: app

        - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@1
          displayName: "Install Terraform $(TerraformVersion)"
          inputs:
            terraformVersion: $(TerraformVersion)

        - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV4@4
          displayName: "Terraform init"
          inputs:
            workingDirectory: $(Pipeline.Workspace)/infra
            # https://github.com/microsoft/azure-pipelines-agent/issues/1307
            # La service connection doit être hardcodée
            # Il n'est pas possible d'utiliser de variables pour le moment
            backendServiceArm: "sbx"
            backendAzureRmResourceGroupName: $(TfStateResourceGroupName)
            backendAzureRmStorageAccountName: $(TfStateStorageAccountName)
            backendAzureRmContainerName: $(TfStateStorageAccountContainerName)
            backendAzureRmKey: $(TfStateName)
            commandOptions: "-no-color"

        - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV4@4
          displayName: "Terraform validate"
          inputs:
            command: validate
            workingDirectory: $(Pipeline.Workspace)/infra
            commandOptions: "-no-color"

        - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@4
          displayName: "Terraform apply"
          name: terraformApply
          inputs:
            command: apply
            workingDirectory: $(Pipeline.Workspace)/infra
            commandOptions: "-no-color -auto-approve"
            # https://github.com/microsoft/azure-pipelines-agent/issues/1307
            # La service connection doit être hardcodée
            # Il n'est pas possible d'utiliser de variables pour le moment
            environmentServiceNameAzureRM: "sbx"

        - powershell: |
            $terraformOutput = terraform output -json | ConvertFrom-Json
            $terraformOutput | Get-Member -MemberType NoteProperty | % { $o = $terraformOutput.($_.Name); Write-Host "##vso[task.setvariable variable=$($_.Name);isoutput=true;issecret=$($o.sensitive)]$($o.value)" }
          name: terraformOutput
          displayName: Parse terraform outputs
          workingDirectory: $(Pipeline.Workspace)/infra

        - task: AzureStaticWebApp@0
          displayName: "Deploy Static Web App"
          inputs:
            workingDirectory: $(Pipeline.Workspace)/app
            app_location: "."
            api_location: "/api"
            skip_app_build: true
            skip_api_build: true
            is_static_export: true
            verbose: true
            azure_static_web_apps_api_token: "$(terraformOutput.static_web_app_api_key)"
            production_branch: main
